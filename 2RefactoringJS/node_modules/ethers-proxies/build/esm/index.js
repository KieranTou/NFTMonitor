import { Interface } from '@ethersproject/abi';
import { getAddress } from '@ethersproject/address';
import { BigNumber } from '@ethersproject/bignumber';
import { hexZeroPad } from '@ethersproject/bytes';
import { Contract } from '@ethersproject/contracts';
// obtained as bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)
const EIP_1967_LOGIC_SLOT = '0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc';
// obtained as bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)
const EIP_1967_BEACON_SLOT = '0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50';
// obtained as keccak256("org.zeppelinos.proxy.implementation")
const OPEN_ZEPPELIN_IMPLEMENTATION_SLOT = '0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3';
// obtained as keccak256("PROXIABLE")
const EIP_1822_LOGIC_SLOT = '0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7';
const EIP_1167_BEACON_INTERFACE = new Interface([
    'function implementation() view returns (address)',
    // some implementations use this over the standard method name so that the beacon contract is not detected as an EIP-897 proxy itself
    'function childImplementation() view returns (address)',
]);
const EIP_897_INTERFACE = new Interface([
    'function implementation() view returns (address)',
]);
const GNOSIS_SAFE_PROXY_INTERFACE = new Interface([
    'function masterCopy() view returns (address)',
]);
const detectProxyTarget = (proxyAddress, provider, blockTag) => Promise.any([
    // EIP-1967 direct proxy
    provider
        .getStorageAt(proxyAddress, EIP_1967_LOGIC_SLOT, blockTag)
        .then(readAddress),
    // EIP-1967 beacon proxy
    provider
        .getStorageAt(proxyAddress, EIP_1967_BEACON_SLOT, blockTag)
        .then(readAddress)
        .then((beaconAddress) => {
        const contract = new Contract(beaconAddress, EIP_1167_BEACON_INTERFACE, provider);
        return contract
            .implementation({ blockTag })
            .catch(() => contract.childImplementation({ blockTag }));
    })
        .then(readAddress),
    // OpenZeppelin proxy pattern
    provider
        .getStorageAt(proxyAddress, OPEN_ZEPPELIN_IMPLEMENTATION_SLOT, blockTag)
        .then(readAddress),
    // EIP-1822 Universal Upgradeable Proxy Standard
    provider
        .getStorageAt(proxyAddress, EIP_1822_LOGIC_SLOT, blockTag)
        .then(readAddress),
    // EIP-1167 Minimal Proxy Contract
    provider
        .getCode(proxyAddress, blockTag)
        .then(parse1167Bytecode)
        .then(readAddress),
    // EIP-897 DelegateProxy pattern
    new Contract(proxyAddress, EIP_897_INTERFACE, provider)
        .implementation({ blockTag })
        .then(readAddress),
    // GnosisSafeProxy contract
    new Contract(proxyAddress, GNOSIS_SAFE_PROXY_INTERFACE, provider)
        .masterCopy({ blockTag })
        .then(readAddress),
]).catch(() => null);
const readAddress = (value) => {
    const number = BigNumber.from(value);
    if (number.isZero()) {
        throw new Error('empty slot');
    }
    return getAddress(hexZeroPad(number.toHexString(), 20));
};
const EIP_1167_BYTECODE_PREFIX = '363d3d373d3d3d363d';
const EIP_1167_BYTECODE_SUFFIX = '57fd5bf3';
const parse1167Bytecode = (bytecode) => {
    const prefix = `0x${EIP_1167_BYTECODE_PREFIX}`;
    if (!bytecode.startsWith(prefix) ||
        !bytecode.endsWith(EIP_1167_BYTECODE_SUFFIX)) {
        throw new Error('Not an EIP-1167 bytecode');
    }
    // detect length of address (20 bytes non-optimized, 0 < N < 20 bytes for vanity addresses)
    const pushNHex = bytecode.substring(prefix.length, prefix.length + 2);
    // push1 ... push20 use opcodes 0x60 ... 0x73
    const addressLength = parseInt(pushNHex, 16) - 0x5f;
    if (addressLength < 1 || addressLength > 20) {
        throw new Error('Not an EIP-1167 bytecode');
    }
    // extract address
    return `0x${bytecode.substring(prefix.length + 2, prefix.length + 2 + addressLength * 2 // address length is in bytes, 2 hex chars make up 1 byte
    )}`;
};
export default detectProxyTarget;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBRTlDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQTtBQUNuRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMEJBQTBCLENBQUE7QUFDcEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFBO0FBQ2pELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQTtBQUVuRCw4RUFBOEU7QUFDOUUsTUFBTSxtQkFBbUIsR0FDdkIsb0VBQW9FLENBQUE7QUFFdEUsc0VBQXNFO0FBQ3RFLE1BQU0sb0JBQW9CLEdBQ3hCLG9FQUFvRSxDQUFBO0FBRXRFLCtEQUErRDtBQUMvRCxNQUFNLGlDQUFpQyxHQUNyQyxvRUFBb0UsQ0FBQTtBQUV0RSxxQ0FBcUM7QUFDckMsTUFBTSxtQkFBbUIsR0FDdkIsb0VBQW9FLENBQUE7QUFFdEUsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLFNBQVMsQ0FBQztJQUM5QyxrREFBa0Q7SUFFbEQscUlBQXFJO0lBQ3JJLHVEQUF1RDtDQUN4RCxDQUFDLENBQUE7QUFFRixNQUFNLGlCQUFpQixHQUFHLElBQUksU0FBUyxDQUFDO0lBQ3RDLGtEQUFrRDtDQUNuRCxDQUFDLENBQUE7QUFFRixNQUFNLDJCQUEyQixHQUFHLElBQUksU0FBUyxDQUFDO0lBQ2hELDhDQUE4QztDQUMvQyxDQUFDLENBQUE7QUFFRixNQUFNLGlCQUFpQixHQUFHLENBQ3hCLFlBQW9CLEVBQ3BCLFFBQWtCLEVBQ2xCLFFBQXVDLEVBQ2YsRUFBRSxDQUMxQixPQUFPLENBQUMsR0FBRyxDQUFDO0lBQ1Ysd0JBQXdCO0lBQ3hCLFFBQVE7U0FDTCxZQUFZLENBQUMsWUFBWSxFQUFFLG1CQUFtQixFQUFFLFFBQVEsQ0FB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